# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Lab4_Window.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import math

from Lab4.utils import np_array_to_pixmap
from PIL import Image
import cv2
from PyQt5.QtGui import QPixmap, QDoubleValidator
from PyQt5.QtWidgets import QGraphicsEllipseItem, QGraphicsScene, QMessageBox, QGraphicsView, QFileDialog
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QPointF
import numpy as np

from .interpolation_widget import InterpolationWidget
from .transformation_widget import TransformationWidget

from Lab4.events import event_manager


class Ui_Lab4_Window(QGraphicsView):
    allPoints = []
    point1 = QtCore.QPoint(0, 0)
    listOfList = []
    eventFait = False
    inserted = False
    drawBezier = False
    fileName = ''

    def openImage(self):
        # read image from file dialog window
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        filename, _ = QFileDialog.getOpenFileName(self.centralwidget, "Open Image", "",
                                                       "Images (*.jpg);;Images (*.png);;All Files (*)", options=options)
        
        
        if filename:
            event_manager.trigger("on_load_image", filename)


    def applyTranslation(self):
        # Store height and width of the image
        src = cv2.imread(self.fileName, cv2.IMREAD_UNCHANGED)
        height, width = src.shape[:2]
        x = int(self.lineEdit_8.text())
        y = int(self.lineEdit_9.text())

        T = np.float32([[1, 0, x], [0, 1, y]]) #transform the image using the matrix T : Translation

        img_translation = cv2.warpAffine(src, T, (width + x, height + y), borderValue=(255,255,255))
        pixmap = np_array_to_pixmap(img_translation)
        self.label_2.setPixmap(pixmap)

    def show_popup_sections(self):
        msg = QMessageBox()
        msg.setWindowTitle('Missing value')
        msg.setText('Enter the number of sections')
        msg.exec_()

    def setupUi(self, Lab4_Window):
        Lab4_Window.setObjectName("Lab4_Window")
        Lab4_Window.resize(1300, 700)
        Lab4_Window.setMinimumSize(QtCore.QSize(1300, 700))
        Lab4_Window.setMaximumSize(QtCore.QSize(1300, 700))
        self.centralwidget = QtWidgets.QWidget(Lab4_Window)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")

        self.interpolation_tab = InterpolationWidget()
        self.affine_transforms_tab = TransformationWidget()


        self.tabWidget.addTab(self.interpolation_tab, "")
        self.tabWidget.addTab(self.affine_transforms_tab, "")
        self.gridLayout_2.addWidget(self.tabWidget, 0, 1, 1, 1)
        Lab4_Window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Lab4_Window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAdd = QtWidgets.QMenu(self.menubar)
        self.menuAdd.setObjectName("menuAdd")
        Lab4_Window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Lab4_Window)
        self.statusbar.setObjectName("statusbar")
        Lab4_Window.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QAction(Lab4_Window)
        self.actionExit.setObjectName("actionExit")
        self.actionImage = QtWidgets.QAction(Lab4_Window)
        self.actionImage.setObjectName("actionImage")
        self.menuFile.addAction(self.actionExit)
        self.menuAdd.addAction(self.actionImage)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAdd.menuAction())
        self.actionImage.triggered.connect(lambda: self.openImage())

        self.penLine = QtGui.QPen()
        self.penLine.setWidth(2)
        self.penLine.setColor(QtGui.QColor('blue'))
        self.penLine.setStyle(Qt.CustomDashLine)
        self.controlPt = QtCore.QPoint(0, 0)
        self.Nclick = 0
        self.pointsList = []
        self.pointsList2 = []
        self.actionImage.setDisabled(True)

        self.retranslateUi(Lab4_Window)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Lab4_Window)
        self.tabWidget.currentChanged.connect(self.onChange)


    def onChange(self, i):
        if (self.tabWidget.currentIndex() == 1):
            self.actionImage.setDisabled(False)
        if (self.tabWidget.currentIndex() == 0):
            self.actionImage.setDisabled(True)


    def retranslateUi(self, Lab4_Window):
        _translate = QtCore.QCoreApplication.translate
        Lab4_Window.setWindowTitle(_translate("Lab4_Window", "Lab4_Window"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.interpolation_tab), _translate("Lab4_Window", "Parametric Curves"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.affine_transforms_tab), _translate("Lab4_Window", "Geometric transformations"))
        
        self.menuFile.setTitle(_translate("Lab4_Window", "File"))
        self.menuAdd.setTitle(_translate("Lab4_Window", "Add"))
        self.actionExit.setText(_translate("Lab4_Window", "Exit"))
        self.actionImage.setText(_translate("Lab4_Window", "Image"))
